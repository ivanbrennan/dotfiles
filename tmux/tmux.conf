# on Darwin: fix ssh-agent && fix clipboard
# on Linux: just use bash
if '[ $(uname) = Darwin ]' \
   'setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock ; \
    set -g default-command "reattach-to-user-namespace -l /usr/local/bin/bash"' \
   'set -g default-command bash'

set  -g  default-terminal "xterm-256color"
set  -ga terminal-overrides ',xterm-256color:Tc'
set  -g  history-limit 5000
set  -g  display-time 2000
set  -s  set-clipboard off

# message area
if '[ "$THEME" = light ]' 'set  -g message-fg "#000000"' \
                          'set  -g message-fg "default"'
if '[ "$THEME" = light ]' 'set  -g message-bg "#e7e7e7"' \
                          'set  -g message-bg "#1e1e1e"'

# pane border
set  -g  pane-border-fg        '#909090'
set  -g  pane-active-border-fg '#909090'

# selection
if '[ "$THEME" = light ]' 'set  -g mode-fg "default"' \
                          'set  -g mode-fg "#ffffff"'
if '[ "$THEME" = light ]' 'set  -g mode-bg "#e0e3f3"' \
                          'set  -g mode-bg "#363f57"'

# status
set  -g  status-interval 0
set  -g  status-justify left
set  -g  status-left ''

# window status
setw -g  window-status-format ' #I #{?window_zoomed_flag,#[italics],}#W'
if '[ "$THEME" = light ]' 'set  -g status-fg "#404040"' \
                          'set  -g status-fg "#D8DEE9"'
if '[ "$THEME" = light ]' 'set  -g status-bg "#ffffff"' \
                          'set  -g status-bg "#181818"'
if '[ "$THEME" = light ]' 'set  -g status-attr default' \
                          'set  -g status-attr dim'

# window status current
if '[ "$THEME" = light ]' 'setw -g window-status-current-format " #{?window_zoomed_flag,#[fg=#005f87]#[bg=#f9f9f9]#I #[italics],#[fg=#000000]#I }#[bold]#W#[fg=default]"' \
                          'setw -g window-status-current-format " #{?window_zoomed_flag,#[fg=#afdfff]#I #[italics],#[fg=#ffffff]#I }#[bold]#W#[fg=default]"'

# status right
set  -g  status-right-length 50
if '[ "$THEME" = light ]' 'set  -g status-right " #S #[fg=#000000]·#[fg=default] #h "' \
                          'set  -g status-right " #S #[fg=#9bd4ff]·#[fg=default] #h "'

# keys
setw -g  xterm-keys  on
setw -g  mode-keys   vi
set  -g  status-keys "emacs"

# prefix
unbind C-b
set -g prefix C-a
set -g escape-time 1
bind C-a send-prefix

# alternate prefix
bind M-Space set -g prefix M-Space \; \
             bind M-Space send-prefix \; \
             bind C-a source-file -q /etc/tmux.conf \; \
                      source-file -q ~/.tmux.conf

# user-keys
set  -s user-keys[0]   "\e[44;5u" # recognize C-, key
set  -s user-keys[1]   "\e[46;5u" # recognize C-. key
bind -n User0  send -l "\e[44;5u" # let C-, pass through unchanged
bind -n User1  send -l "\e[46;5u" # let C-. pass through unchanged

# mouse
set -g mouse on

# Check state of the pane in which scroll occurred. If capturing mouse input or in
# copy-mode, forward scroll event to the pane. Else, enter copy-mode.

bind -n WheelUpPane if -Ft= '#{mouse_any_flag}' 'send-keys -M' 'if -Ft= "#{pane_in_mode}" "send-keys -M" "copy-mode -et="'
bind -T copy-mode-vi C-WheelUpPane send -X halfpage-up
bind -T copy-mode-vi C-WheelDownPane send -X halfpage-down

# bindings
bind    u   choose-session
bind   C-u  choose-session
bind    R   refresh-client
bind    r   source-file -q /etc/tmux.conf \; source-file -q ~/.tmux.conf
unbind  q   # display-panes
bind    q   confirm-before -p "kill-session #S? (y/n)" kill-session
bind    K   send-keys -R C-l \; clear-history
bind    b   set -q status
bind   C-b  set -q status
bind    g   display-message
bind   C-n  next-window
bind   C-p  previous-window

# pane manipulation
unbind    s    # tree
bind      s    split-window -v
bind      v    split-window -h
bind     C-h   select-pane  -L
bind     C-j   select-pane  -D
bind     C-k   select-pane  -U
bind     C-l   select-pane  -R
unbind    m    # select-pane -m
bind      m    command-prompt -I "#W" "rename-window '%%'"
bind     C-m   command-prompt -I "#W" "rename-window '%%'"
unbind    ,    # command-prompt -I "#W" "rename-window '%%'"
bind      ,    if -F '#{window_zoomed_flag}' 'select-pane -t :.+; resize-pane -Z' 'last-pane'
bind    User0  if -F '#{window_zoomed_flag}' 'select-pane -t :.+; resize-pane -Z' 'last-pane'
bind -r   O    if -F '#{window_zoomed_flag}' 'last-pane' 'select-pane -t :.+; resize-pane -Z'
bind -r   \    next-layout
bind -r  C-\   next-layout

# pane zoom
unbind    . # command-prompt "move-window -t '%%'"
bind      .    resize-pane -Z
bind    User1  resize-pane -Z # C-.

# copy mode
unbind  Space  # next-layout
bind  Space  copy-mode
bind C-Space copy-mode
bind   -T copy-mode-vi   v   send -X begin-selection

if '[ $(uname) = Darwin ]' \
   'bind -T copy-mode-vi Space send -X copy-pipe "reattach-to-user-namespace pbcopy" \; send -X clear-selection; \
    bind -T copy-mode-vi   y   send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"; \
    bind -T copy-mode-vi   Y   send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; \
                               send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"' \
   'bind -T copy-mode-vi Space send -X copy-pipe "xsel --input --clipboard" \; send -X clear-selection; \
    bind -T copy-mode-vi   y   send -X copy-pipe-and-cancel "xsel --input --clipboard"; \
    bind -T copy-mode-vi   Y   send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; \
                               send -X copy-pipe-and-cancel "xsel --input --clipboard"'

unbind -T copy-mode-vi  C-e  # scroll-down
bind   -T copy-mode-vi  C-e  send -X end-of-line \; \
                             if -F '#{?selection_present,0,1}' 'send-keys -X cursor-left'
bind   -T copy-mode-vi  '$'  send -X end-of-line \; \
                             if -F '#{?selection_present,0,1}' 'send-keys -X cursor-left'
unbind -T copy-mode-vi  C-j  # copy-selection-and-cancel
bind   -T copy-mode-vi  C-j  send -X scroll-down
bind   -T copy-mode-vi  C-k  send -X scroll-up
bind   -T copy-mode-vi  C-a  send -X start-of-line
unbind -T copy-mode-vi Escape # send-keys -X clear-selection
bind   -T copy-mode-vi Escape if -F '#{selection_present}' \
                                    'send-keys -X clear-selection' \
                                    'send-keys -X cancel'

# Stay in copy mode on drag end, but otherwise exit for mouse up.
unbind -T copy-mode-vi MouseDragEnd1Pane

bind -T copy-mode-vi DoubleClick1Pane select-pane \; \
                                      send -X select-word

bind -n              DoubleClick1Pane select-pane \; \
                                      copy-mode -M \; \
                                      send -X select-word

bind -T copy-mode-vi TripleClick1Pane select-pane \; \
                                      send -X select-line

bind -n              TripleClick1Pane select-pane \; \
                                      copy-mode -M \; \
                                      send -X select-line

# search
bind  /  copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind C-_ copy-mode \; command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi / command-prompt -i -p "(search down)" "send -X search-forward-incremental \"%%%\""

# quick splits
unbind t # clock-mode
bind  t  split-window -h 'vtop -t certs || vtop -t wizard || htop || top'
