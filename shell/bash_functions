#!/bin/sh

# ::::::::: Profile ::::::::::::::::::::::::::
{
  dark() {
    export THEME=dark
    set_profile 'black' 'blue & grey'
    source_bash_profile
  }

  light() {
    export THEME=light
    set_profile 'white' 'blue & white'
    source_bash_profile
  }

  remote() {
    export THEME=remote
    set_profile 'remote' 'Smyck'
    source_bash_profile
  }

  set_profile() {
    if using_iterm; then
      set_iterm_profile "$1"
    else
      set_terminal_profile "$2"
    fi
  }

  set_iterm_profile() {
    if using_multiplexer; then
      set_multiplex_iterm_profile "$1"
    else
      echo -e "\033]50;SetProfile=$1\007"
    fi
  }

  set_terminal_profile() {
    osascript -e "tell application \"Terminal\" to set current settings of front window to settings set \"$1\""
  }

  set_multiplex_iterm_profile() {
    if using_tmux; then
      set_tmux_iterm_profile "$1"
    else
      set_gnu_screen_iterm_profile "$1"
    fi
  }

  set_tmux_iterm_profile() {
    echo -e "\033Ptmux;\033\033]50;SetProfile=$1\007\033\\"
  }

  set_gnu_screen_iterm_profile() {
    echo -e "\033P\033]50;SetProfile=$1\007\033\\"
  }

  using_iterm() {
    [ -n "${ITERM_PROFILE+x}" ]
  }

  using_multiplexer() {
    [[ "$TERM" =~ "screen" ]]
  }

  using_tmux() {
    [ -n "${TMUX+x}" ]
  }

  source_bash_profile() {
    [ -f ~/.bash_profile ] && . ~/.bash_profile
  }
}

# ::::::::: Utils ::::::::::::::::::::::::::::
{
  path() {
    echo "PATH:" && echo "$PATH" | tr ":" "\n"
  }

  hidden() {
    if [[ $( defaults read com.apple.finder AppleShowAllFiles ) == "FALSE" ]]; then
      defaults write com.apple.finder AppleShowAllFiles TRUE
      echo "Showing hidden"
    else
      defaults write com.apple.finder AppleShowAllFiles FALSE
      echo "Hiding hidden"
    fi
    killall -HUP Finder
  }

  les() {
    if (( $(wc -l < "$1") < ${LINES:-20} )); then
      cat "$1"
    else
      less "$1"
    fi
  }

  lxr() {
    if [ -z "${LESS+x}" ]; then
      export LESS="-XR"
    else
      unset LESS
    fi
  }

  # Easily grep for a matching process
  psg() {
    if [ $# = 1 ]; then
      local first=${1:0:1}
      local rest=${1:1}

      ps aux | grep "[$first]$rest\|[P]ID"
    fi
  }

  # Easily grep for a matching file
  lg() {
    ls -la | grep "$1"
  }

  # Extract archive based on extension
  extract() {
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)  tar xjf "$1"      ;;
        *.tar.gz)   tar xzf "$1"      ;;
        *.bz2)      bunzip2 "$1"      ;;
        *.rar)      rar x "$1"        ;;
        *.gz)       gunzip "$1"       ;;
        *.tar)      tar xf "$1"       ;;
        *.tbz2)     tar xjf "$1"      ;;
        *.tgz)      tar xzf "$1"      ;;
        *.zip)      unzip "$1"        ;;
        *.Z)        uncompress "$1"   ;;
        *)          echo "'$1' cannot be extracted via extract()" ;;
      esac
    else
      echo "'$1' is not a valid file"
    fi
  }

  # Compress PDF with Ghostscript
  ghost() {
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="compressed-$1" "$1"
  }

  # ssh tabs
  ssh() {
    set_window_title "$@"
    /usr/bin/ssh $@
  }

  set_window_title() {
    echo -en "\033]0;$*\007"
  }

  # search and replace
  rupl() {
    if [ "$#" != 2 ]; then
      echo "Usage: rupl search_pattern replacement"
      return 1
    else
      local search_pattern=$1
      local replacement=$2

      greplace '**.rb' "$search_pattern" "$replacement"
    fi
  }

  greplace() {
    if [ "$#" != 4 ]; then
      echo "Usage: greplace path file_pattern search_pattern replacement"
      return 1
    else
      local path=$1
      local file_pattern=$2
      local search_pattern=$3
      local replacement=$4

      # This is built for BSD grep and the sed bundled with OS X.
      # GNU grep takes -Z instead of --null, and other versions of sed may not support the -i '' syntax.

      find "$path" -type f -name "$file_pattern" -exec grep -lw --null "$search_pattern" {} + |
        xargs -0 sed -i '' "s/[[:<:]]$search_pattern[[:>:]]/$replacement/g"
    fi
  }

  # jump to Bash builtin documentation
  man () {
    if [ "$(type -t "$1")" = "builtin" ]; then
      command man bash | less --hilite-search --pattern="^ *$1 +\["
    else
      command man "$@"
    fi
  }

  # dictionary
  fdoc() {
    curl dict://dict.org/d:$1:foldoc
  }
}

# ::::::::: Editors ::::::::::::::::::::::::::
{
  # Run just one MacVim
  ivim() {
    if [ -n "$1" ]; then
      command mvim --remote-silent "$@"
    elif [ -n "$( mvim --serverlist )" ]; then
      command mvim --remote-send ":call foreground()<CR>:enew<CR>:<BS>"
    else
      command mvim
    fi
  }

  lnspacemacs() {
    ln -shF ~/Development/resources/emacs/spacemacs ~/.emacs.d
  }

  lnemacs() {
    ln -shF ~/Development/resources/emacs/emacs.d ~/.emacs.d
  }

  debugemacs() {
    /usr/local/opt/emacs-mac/Emacs.app/Contents/MacOS/Emacs --debug-init &
  }
}

# ::::::::: Processes ::::::::::::::::::::::::
{
  running() {
    rpid "$1" > /dev/null
  }

  rpid() {
    pgrep -f "$1" 2> /dev/null
  }

  p_stop() {
    local proc=$1; shift
    local name=$1; shift

    if running "$proc"; then
      "$@"
    else
      echo "$name not running"
    fi
  }

  p_status() {
    local proc=$1; shift
    local name=$1; shift

    if running "$proc"; then
      echo "$name alive"
    else
      echo "$name dead"
    fi
  }

  # server helpers
  mstat() {
    p_status mysql MySQL
  }

  restat() {
    p_status redis "Redis daemon"
  }

  sistat() {
    p_status sidekiq "Sidekiq daemon"
  }

  astat() {
    mstat && restat && sistat
  }

  serverhelp() {
    echo -e "MySQL: \tmysql.server start"
    echo -e "\tmysql.server stop\n"
    echo -e "Redis: \tredis-server ~/.redis/redis.conf"
    echo -e "\tpkill redis\n"
    echo -e "kiqs: \tsidekiq -d -L log/sidekiq.log"
    echo -e "\tpkill sidekiq"
  }

  # Rails
  krs() {
    p_stop "rails s" "Rails server" rails_stop "server" "$1"
  }

  krs9() {
    krs '-9'
  }

  rails_stop() {
    kill "$2" "$(rpid "rails ${1:0:1}")" 2> /dev/null
    for i in 1 2; do
      if ! running "rails ${1:0:1}"; then
        break
      else
        sleep 1
      fi
    done
    reportkill "$1"
  }

  reportkill() {
    if ! running "rails ${1:0:1}"; then
      echo "Rails $1 slain"
    else
      echo "Rails $1 survived (pid $(rpid "rails ${1:0:1}"))"
    fi
  }
}

# ::::::::: Tmux :::::::::::::::::::::::::::::
{
  gmit() {
    if [ -n "${TMUX+x}" ]; then
      smartpane 'git commit'
    else
      git commit
    fi
  }

  smartpane() {
    local width=$( tmux display-message -p '#{pane_width}' )
    local height=$( tmux display-message -p '#{pane_height}' )
    local ratio=3

    if (( width > (height * ratio) )); then
      tmux split-window -h -l 85 "$*"
    else
      tmux split-window -v -p 30 "$*"
    fi
  }
}

