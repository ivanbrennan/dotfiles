# bashrc for interactive shells

# bashrc is meant for non-login shells. It should not
# print any output, as that causes tools like scp fail.

# ::::::::: XDG Base Directory :::::::::::::::
{
  # Some well-crafted applications (e.g. git, neovim) observe this spec.
  # https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html

  export XDG_CONFIG_HOME="$HOME/.config"
}

# ::::::::: Paths ::::::::::::::::::::::::::::
{
  # PATH
  {
    export SCRIPTS_PATH="$HOME/Development/resources/dotfiles/bin"

    export USR_PATHS="/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin"

    export PATH="$SCRIPTS_PATH:$USR_PATHS:$PATH"
  }

  # DON'T EXPORT CDPATH, as it can screw up scripts.
  CDPATH=".:~/Development:~/Development/resources:~"

  # Node.js
  export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

  ### Added by the Heroku Toolbelt
  export PATH="/usr/local/heroku/bin:$PATH"
}

# ::::::::: One True Editor(s) :::::::::::::::
{
  # Neovim
  NEOVIM="$( { command -v nvim || command -v vim || command -v vi; } )"
  export VISUAL=$NEOVIM
  export GIT_EDITOR=$NEOVIM
  export SVN_EDITOR=$NEOVIM

  # Emacs
  export SPACEMACSDIR="~/Development/resources/emacs/spacemacs.d"
  export EMAIL="ivan.brennan@gmail.com"

  # Configure GNU Global to work with universal-ctags
  export GTAGSCONF=/usr/local/share/gtags/gtags.conf
  export GTAGSLABEL=new-ctags

  # Don't bother editing Git merge commit-messages
  export GIT_MERGE_AUTOEDIT="no"
}

# ::::::::: Bash Completion ::::::::::::::::::
{
  brew_prefix=$(brew --prefix 2>/dev/null)

  if [ -n "$brew_prefix" ] && [ -f "$brew_prefix/etc/bash_completion" ]; then
    . "$brew_prefix/etc/bash_completion"
  fi
}

# ::::::::: Colors :::::::::::::::::::::::::::
{
  [ -f ~/.bash_colors.sh ] && . ~/.bash_colors.sh

  if [ -z "$THEME" ]; then
    case "$ITERM_PROFILE" in
      'black'  ) export THEME=dark   ;;
      'remote' ) export THEME=remote ;;
      *        ) export THEME=light  ;;
    esac
  fi

  export CLICOLOR=1
  export GREP_OPTIONS="--color"

  # ls
  {
    export LSCOLORS="exgxcxdxbxegedabagacad"

    # Order of attributes:
    #  1. directory
    #  2. symbolic link
    #  3. socket
    #  4. pipe
    #  5. executable
    #  6. block special
    #  7. character special
    #  8. executable with setuid bit set
    #  9. executable with setgid bit set
    # 10. directory writable to others, with sticky bit
    # 11. directory writable to others, without sticky bit

    # Color designators:
    # a black         A bold black (grey)
    # b red           B bold red
    # c green         C bold green
    # d brown         D bold brown (yellow)
    # e blue          E bold blue
    # f magenta       F bold magenta
    # g cyan          G bold cyan
    # h light grey    H bold light grey (white)
    # x default foreground or background

    # the default is exfxcxdxbxegedabagacad
  }
}

# ::::::::: Prompt :::::::::::::::::::::::::::
{
  build_prompt() {
    export PS1="╭-${BRIGHT_BLUE}\u${NORMAL}·${BRIGHT_BLUE}\W${NORMAL}\$(grb_git_prompt)${NORMAL}\n╰ဝ "
    export PS2=" ❯ "
    export PS4=" + "
  }

  grb_git_prompt() {
    if [ -n "$(__gitdir)" ]; then
      local color="$(git_branch_color)"

      # __git_ps1 inserts the current git branch where %s is
      echo " $(__git_ps1 "(${color}%s${NORMAL})")"
    fi
  }

  git_branch_color() {
    local minutes="$(minutes_since_last_commit)"

    if [ -n "$minutes" ]; then
      echo "$(minutes_color minutes)"
    elif [[ "$THEME" =~ dark ]]; then
      echo $WHITE
    else
      echo $BLACK
    fi
  }

  minutes_since_last_commit() {
    local now=$(date +%s)
    local last_commit=$(git log --pretty=format:'%at' -1 2>/dev/null)

    if [ "$?" -eq 0 ]; then
      echo $(( (now - last_commit) / 60 ))
    fi
  }

  minutes_color() {
    if [ -z "$1" ]; then
      return
    elif [[ "$1" -gt 30 ]]; then
      echo "${RED}"
    elif [[  "$1" -gt 10  ]]; then
      echo "${YELLOW}"
    else
      echo "${GREEN}"
    fi
  }

  build_prompt
}
